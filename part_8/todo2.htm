<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calendar To-Do List</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .current-date {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 400px;
            gap: 0;
            min-height: 600px;
        }

        .todo-section {
            padding: 30px;
            border-right: 1px solid #e0e0e0;
        }

        .calendar-section {
            padding: 30px;
            background: #f8f9fa;
        }

        .date-selector {
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .date-selector input {
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
        }

        .date-selector button {
            padding: 10px 15px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9rem;
        }

        .date-selector button:hover {
            background: #5a67d8;
        }

        .input-container {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
        }

        .task-input {
            flex: 1;
            padding: 15px;
            border: 2px solid #ddd;
            border-radius: 10px;
            font-size: 1rem;
            outline: none;
            transition: border-color 0.3s;
        }

        .task-input:focus {
            border-color: #667eea;
        }

        .add-btn {
            padding: 15px 25px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: transform 0.2s;
        }

        .add-btn:hover {
            transform: translateY(-2px);
        }

        .tasks-container {
            max-height: 400px;
            overflow-y: auto;
        }

        .task-item {
            background: white;
            border: 1px solid #e0e0e0;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 15px;
            transition: all 0.3s ease;
        }

        .task-item:hover {
            transform: translateX(5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .task-item.completed {
            background: #f0fff4;
            border-color: #68d391;
        }

        .task-checkbox {
            width: 20px;
            height: 20px;
            cursor: pointer;
        }

        .task-text {
            flex: 1;
            font-size: 1rem;
            transition: all 0.3s;
        }

        .task-text.completed {
            text-decoration: line-through;
            color: #888;
        }

        .task-date {
            font-size: 0.9rem;
            color: #666;
            background: #f0f0f0;
            padding: 4px 8px;
            border-radius: 12px;
        }

        .delete-btn {
            background: #ff6b6b;
            color: white;
            border: none;
            border-radius: 6px;
            padding: 8px 12px;
            cursor: pointer;
            font-size: 0.9rem;
        }

        .delete-btn:hover {
            background: #ff5252;
        }

        .calendar {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .calendar-nav {
            background: #667eea;
            color: white;
            border: none;
            border-radius: 6px;
            padding: 8px 12px;
            cursor: pointer;
        }

        .calendar-nav:hover {
            background: #5a67d8;
        }

        .calendar-month {
            font-size: 1.2rem;
            font-weight: 600;
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
        }

        .calendar-day-header {
            text-align: center;
            font-weight: 600;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 6px;
            font-size: 0.9rem;
        }

        .calendar-day {
            aspect-ratio: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s;
            position: relative;
            font-size: 0.9rem;
        }

        .calendar-day:hover {
            background: #e0e7ff;
        }

        .calendar-day.today {
            background: #667eea;
            color: white;
            font-weight: 600;
        }

        .calendar-day.selected {
            background: #764ba2;
            color: white;
        }

        .calendar-day.has-tasks::after {
            content: '';
            position: absolute;
            bottom: 2px;
            right: 2px;
            width: 6px;
            height: 6px;
            background: #ff6b6b;
            border-radius: 50%;
        }

        .calendar-day.other-month {
            color: #ccc;
        }

        .stats {
            margin-top: 20px;
            padding: 15px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .stats h3 {
            margin-bottom: 10px;
            color: #333;
        }

        .stat-item {
            display: flex;
            justify-content: space-between;
            padding: 5px 0;
            border-bottom: 1px solid #eee;
        }

        .stat-item:last-child {
            border-bottom: none;
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .calendar-section {
                border-top: 1px solid #e0e0e0;
                border-right: none;
            }
            
            .todo-section {
                border-right: none;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸ“… Calendar To-Do List</h1>
            <div class="current-date" id="currentDate"></div>
        </div>
        
        <div class="main-content">
            <div class="todo-section">
                <div class="date-selector">
                    <input type="date" id="selectedDate">
                    <button onclick="setToday()">Today</button>
                    <button onclick="setYesterday()">Yesterday</button>
                </div>
                
                <div class="input-container">
                    <input type="text" class="task-input" id="taskInput" placeholder="Add a new task...">
                    <button class="add-btn" onclick="addTask()">Add Task</button>
                </div>
                
                <div class="tasks-container" id="tasksContainer">
                    <!-- Tasks will be displayed here -->
                </div>
            </div>
            
            <div class="calendar-section">
                <div class="calendar">
                    <div class="calendar-header">
                        <button class="calendar-nav" onclick="changeMonth(-1)">â€¹</button>
                        <div class="calendar-month" id="calendarMonth"></div>
                        <button class="calendar-nav" onclick="changeMonth(1)">â€º</button>
                    </div>
                    
                    <div class="calendar-grid" id="calendarGrid">
                        <!-- Calendar will be generated here -->
                    </div>
                </div>
                
                <div class="stats">
                    <h3>ðŸ“Š Task Statistics</h3>
                    <div class="stat-item">
                        <span>Today's Tasks:</span>
                        <span id="todayTasks">0</span>
                    </div>
                    <div class="stat-item">
                        <span>Completed Today:</span>
                        <span id="todayCompleted">0</span>
                    </div>
                    <div class="stat-item">
                        <span>Total Tasks:</span>
                        <span id="totalTasks">0</span>
                    </div>
                    <div class="stat-item">
                        <span>Completion Rate:</span>
                        <span id="completionRate">0%</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let tasks = {};
        let currentCalendarDate = new Date();
        let selectedDateElement = null;

        // Initialize the app
        function init() {
            loadTasks();
            setToday();
            generateCalendar();
            updateCurrentDate();
            updateStats();
        }

        // Update current date display
        function updateCurrentDate() {
            const now = new Date();
            const options = { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            };
            document.getElementById('currentDate').textContent = now.toLocaleDateString('en-US', options);
        }

        // Set selected date to today
        function setToday() {
            const today = new Date();
            const dateStr = today.toISOString().split('T')[0];
            document.getElementById('selectedDate').value = dateStr;
            displayTasks(dateStr);
        }

        // Set selected date to yesterday
        function setYesterday() {
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            const dateStr = yesterday.toISOString().split('T')[0];
            document.getElementById('selectedDate').value = dateStr;
            displayTasks(dateStr);
        }

        // Add a new task
        function addTask() {
            const taskInput = document.getElementById('taskInput');
            const selectedDate = document.getElementById('selectedDate').value;
            const taskText = taskInput.value.trim();

            if (taskText === '' || selectedDate === '') {
                alert('Please enter a task and select a date!');
                return;
            }

            if (!tasks[selectedDate]) {
                tasks[selectedDate] = [];
            }

            const task = {
                id: Date.now(),
                text: taskText,
                completed: false,
                createdAt: new Date().toISOString()
            };

            tasks[selectedDate].push(task);
            taskInput.value = '';
            
            saveTasks();
            displayTasks(selectedDate);
            generateCalendar();
            updateStats();
        }

        // Display tasks for a specific date
        function displayTasks(date) {
            const container = document.getElementById('tasksContainer');
            const dateTasks = tasks[date] || [];

            if (dateTasks.length === 0) {
                container.innerHTML = '<div style="text-align: center; color: #888; padding: 20px;">No tasks for this date</div>';
                return;
            }

            container.innerHTML = dateTasks.map(task => `
                <div class="task-item ${task.completed ? 'completed' : ''}">
                    <input type="checkbox" class="task-checkbox" 
                           ${task.completed ? 'checked' : ''} 
                           onchange="toggleTask('${date}', ${task.id})">
                    <span class="task-text ${task.completed ? 'completed' : ''}">${task.text}</span>
                    <span class="task-date">${date}</span>
                    <button class="delete-btn" onclick="deleteTask('${date}', ${task.id})">Delete</button>
                </div>
            `).join('');
        }

        // Toggle task completion
        function toggleTask(date, taskId) {
            const task = tasks[date].find(t => t.id === taskId);
            if (task) {
                task.completed = !task.completed;
                saveTasks();
                displayTasks(date);
                updateStats();
            }
        }

        // Delete a task
        function deleteTask(date, taskId) {
            tasks[date] = tasks[date].filter(t => t.id !== taskId);
            if (tasks[date].length === 0) {
                delete tasks[date];
            }
            saveTasks();
            displayTasks(date);
            generateCalendar();
            updateStats();
        }

        // Generate calendar
        function generateCalendar() {
            const grid = document.getElementById('calendarGrid');
            const monthElement = document.getElementById('calendarMonth');
            
            const year = currentCalendarDate.getFullYear();
            const month = currentCalendarDate.getMonth();
            
            monthElement.textContent = new Date(year, month).toLocaleDateString('en-US', { 
                month: 'long', 
                year: 'numeric' 
            });

            // Clear grid
            grid.innerHTML = '';

            // Add day headers
            const dayHeaders = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            dayHeaders.forEach(day => {
                const header = document.createElement('div');
                header.className = 'calendar-day-header';
                header.textContent = day;
                grid.appendChild(header);
            });

            // Get first day of month and number of days
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());

            // Generate 42 days (6 weeks)
            for (let i = 0; i < 42; i++) {
                const currentDate = new Date(startDate);
                currentDate.setDate(startDate.getDate() + i);
                
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day';
                dayElement.textContent = currentDate.getDate();
                
                const dateStr = currentDate.toISOString().split('T')[0];
                const today = new Date().toISOString().split('T')[0];
                
                if (dateStr === today) {
                    dayElement.classList.add('today');
                }
                
                if (currentDate.getMonth() !== month) {
                    dayElement.classList.add('other-month');
                }
                
                if (tasks[dateStr] && tasks[dateStr].length > 0) {
                    dayElement.classList.add('has-tasks');
                }
                
                dayElement.onclick = () => selectDate(dateStr, dayElement);
                grid.appendChild(dayElement);
            }
        }

        // Select a date from calendar
        function selectDate(dateStr, element) {
            // Remove previous selection
            if (selectedDateElement) {
                selectedDateElement.classList.remove('selected');
            }
            
            // Add selection to clicked element
            element.classList.add('selected');
            selectedDateElement = element;
            
            // Update date input and display tasks
            document.getElementById('selectedDate').value = dateStr;
            displayTasks(dateStr);
        }

        // Change calendar month
        function changeMonth(direction) {
            currentCalendarDate.setMonth(currentCalendarDate.getMonth() + direction);
            generateCalendar();
        }

        // Update statistics
        function updateStats() {
            const today = new Date().toISOString().split('T')[0];
            const todayTasks = tasks[today] || [];
            const todayCompleted = todayTasks.filter(t => t.completed).length;
            
            let totalTasks = 0;
            let totalCompleted = 0;
            
            Object.values(tasks).forEach(dayTasks => {
                totalTasks += dayTasks.length;
                totalCompleted += dayTasks.filter(t => t.completed).length;
            });
            
            const completionRate = totalTasks > 0 ? Math.round((totalCompleted / totalTasks) * 100) : 0;
            
            document.getElementById('todayTasks').textContent = todayTasks.length;
            document.getElementById('todayCompleted').textContent = todayCompleted;
            document.getElementById('totalTasks').textContent = totalTasks;
            document.getElementById('completionRate').textContent = completionRate + '%';
        }

        // Save tasks to memory (in a real app, this would be localStorage or a database)
        function saveTasks() {
            // In this demo, tasks are stored in memory
            // For persistence, you would use: localStorage.setItem('tasks', JSON.stringify(tasks));
        }

        // Load tasks from memory
        function loadTasks() {
            // In this demo, tasks start empty
            // For persistence, you would use: tasks = JSON.parse(localStorage.getItem('tasks') || '{}');
        }

        // Handle date input change
        document.getElementById('selectedDate').addEventListener('change', function() {
            displayTasks(this.value);
        });

        // Handle Enter key in task input
        document.getElementById('taskInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                addTask();
            }
        });

        // Initialize the app when page loads
        init();
    </script>
</body>
</html>